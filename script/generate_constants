#!/usr/bin/ruby

OUT_PATH = "./GenerateConstants/main.swift"
SDK_PATH = `xcrun --show-sdk-path`.strip
HEADER_PATH = File.join(SDK_PATH, "/System/Library/Frameworks/Security.framework/Versions/A/Headers")
FILES = [
  ["SecItem.h", /^extern const CFStringRef (kSecAttrKeyType[\w]+)/],
  ["SecItem.h", /^extern const CFStringRef (kSecAttrCan[\w]+)/],
  ["SecItem.h", /^extern const CFStringRef (kSecAttrKeyClass[\w]+)/],
  ["SecItem.h", /^extern const CFStringRef (kSecAttrAccessible[\w]+)/],
  ["SecItem.h", /^extern const CFStringRef (kSecAttrIs[\w]+)/],
  ["SecItem.h", /^extern const CFStringRef (kSecReturn[\w]+)/],
]

out = DATA.read

FILES.each do |fname, rexp|
  outlines = ["\ngenerateEnum([",]

  File.read(File.join(HEADER_PATH, fname)).split("\n").each do |inline|
    if match = inline.match(rexp)
      const = match[1]
      outlines << %Q|  "#{const}": #{const},|
    end
  end

  outlines << "])\n"
  out += outlines.join("\n")
end

File.open(OUT_PATH, "w") do |file|
  file.write(out)
end

__END__
//
//  main.swift
//  GenerateConstants
//
//  Created by Benjamin P Toews on 2/9/17.
//  Copyright Â© 2017 GitHub. All rights reserved.
//

import Foundation
import CommonCrypto

func generateEnum(_ constants: [String: CFString]) {
    var enumString = ""

    // Find longest common prefix.
    let prefix = constants.keys.reduce(constants.keys.first!) { $1.commonPrefix(with: $0) }

    // Drop the first 'k' for the enum name.
    let name = prefix.substring(from: prefix.index(after: prefix.startIndex))

    print("enum \(name): String {", to: &enumString)

    for (const, value) in constants {
        // Case name is constant name without prefix.
        let caseName = const.substring(from: prefix.endIndex)

        print("  case \(caseName) = \"\(value)\" // \(const)", to: &enumString)
    }

    print("}", to: &enumString)

    print(enumString)
}

// Generated by `script/generate_constants`

generateEnum([
  "kSecAttrAccess": kSecAttrAccess,
  "kSecAttrAccessControl": kSecAttrAccessControl,
  "kSecAttrAccessGroup": kSecAttrAccessGroup,
  "kSecAttrAccessible": kSecAttrAccessible,
  "kSecAttrAccount": kSecAttrAccount,
  "kSecAttrApplicationLabel": kSecAttrApplicationLabel,
  "kSecAttrApplicationTag": kSecAttrApplicationTag,
  "kSecAttrAuthenticationType": kSecAttrAuthenticationType,
  "kSecAttrCanDecrypt": kSecAttrCanDecrypt,
  "kSecAttrCanDerive": kSecAttrCanDerive,
  "kSecAttrCanEncrypt": kSecAttrCanEncrypt,
  "kSecAttrCanSign": kSecAttrCanSign,
  "kSecAttrCanUnwrap": kSecAttrCanUnwrap,
  "kSecAttrCanVerify": kSecAttrCanVerify,
  "kSecAttrCanWrap": kSecAttrCanWrap,
  "kSecAttrCertificateEncoding": kSecAttrCertificateEncoding,
  "kSecAttrCertificateType": kSecAttrCertificateType,
  "kSecAttrComment": kSecAttrComment,
  "kSecAttrCreationDate": kSecAttrCreationDate,
  "kSecAttrCreator": kSecAttrCreator,
  "kSecAttrDescription": kSecAttrDescription,
  "kSecAttrEffectiveKeySize": kSecAttrEffectiveKeySize,
  "kSecAttrGeneric": kSecAttrGeneric,
  "kSecAttrIsInvisible": kSecAttrIsInvisible,
  "kSecAttrIsNegative": kSecAttrIsNegative,
  "kSecAttrIsPermanent": kSecAttrIsPermanent,
  "kSecAttrIssuer": kSecAttrIssuer,
  "kSecAttrKeyClass": kSecAttrKeyClass,
  "kSecAttrKeySizeInBits": kSecAttrKeySizeInBits,
  "kSecAttrKeyType": kSecAttrKeyType,
  "kSecAttrLabel": kSecAttrLabel,
  "kSecAttrModificationDate": kSecAttrModificationDate,
  "kSecAttrPRF": kSecAttrPRF,
  "kSecAttrPath": kSecAttrPath,
  "kSecAttrPort": kSecAttrPort,
  "kSecAttrProtocol": kSecAttrProtocol,
  "kSecAttrPublicKeyHash": kSecAttrPublicKeyHash,
  "kSecAttrRounds": kSecAttrRounds,
  "kSecAttrSalt": kSecAttrSalt,
  "kSecAttrSecurityDomain": kSecAttrSecurityDomain,
  "kSecAttrSerialNumber": kSecAttrSerialNumber,
  "kSecAttrServer": kSecAttrServer,
  "kSecAttrService": kSecAttrService,
  "kSecAttrSubject": kSecAttrSubject,
  "kSecAttrSubjectKeyID": kSecAttrSubjectKeyID,
  "kSecAttrType": kSecAttrType,
])
